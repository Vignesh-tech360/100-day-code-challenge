Task:
An arcade game player wants to climb to the top of the leaderboard and track their ranking. The game uses Dense Ranking, so its leaderboard works like this:

The player with the highest score is ranked number on the leaderboard.
Players who have equal scores receive the same ranking number, and the next player(s) receive the immediately following ranking number.
Example

ranked=[100, 90, 90, 80]

player = [70, 80, 105]

The ranked players will have ranks 1, 2 , 2 , and 3, respectively. If the playerâ€™s scores are 70, 80 and 105, their rankings after each game are 4th, 3rd and 1st. 
Return [4, 3, 1].

Function Description

Complete the climbingLeaderboard function in the editor below.

climbingLeaderboard has the following parameter(s):

int ranked[n]: the leaderboard scores
int player[m]: the playerâ€™s scores

Input Format

The first line contains an integer n, the number of players on the leaderboard.
The next line contains n space-separated integers ranked[i], the leaderboard scores in decreasing order.
The next line contains an integer,m , the number games the player plays.
The last line contains m space-separated integers ranked[i], the game scores.
=======================================================================================================================================================================
Test case:
Sample input:
7
100 100 50 40 40 20 10
4
5 25 50 120

Sample output:
6
4
2
1
====================================================================================================================================================================
Program:
#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'climbingLeaderboard' function below.
#
# The function is expected to return an INTEGER_ARRAY.
# The function accepts following parameters:
#  1. INTEGER_ARRAY ranked
#  2. INTEGER_ARRAY player
#

def searching(a, ranked):
    n = len(ranked)
    if(a >= ranked[0]):
        return 1
    if(a == ranked[n-1]):
        return n
    if(a < ranked[n-1]):
        return n+1
    left = 0
    right = n-1
    while(left < right):
        mid = (left+right) // 2
        if(a == ranked[mid]):
            return mid+1
        if(a < ranked[mid] and a > ranked[mid+1]):
            return mid+2
        if(a < ranked[mid]):
            left = mid
        else:
            right = mid
    return left+2
def climbingLeaderboard(ranked, player):
    # Write your code here
    ans = []
    ranked = sorted(list(set(ranked)))
    ranked.reverse()
    for i in player:
        ans.append(searching(i , ranked))
    return ans

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    ranked_count = int(input().strip())

    ranked = list(map(int, input().rstrip().split()))

    player_count = int(input().strip())

    player = list(map(int, input().rstrip().split()))

    result = climbingLeaderboard(ranked, player)

    fptr.write('\n'.join(map(str, result)))
    fptr.write('\n')

    fptr.close()
